// devices
div(style="position:absolute;right:5px;color:#999999;")
  |v{{ version || '0.0.0' }}

ng-container(*ngIf="changeConfig")
  ack-media-devices(
    "[(array)]"        = "devices"
    "[(videoInputs)]"  = "videoDevices"
    "[(audioInputs)]"  = "audioDevices"
    "[(audioOutputs)]" = "audioOutputs"
    "[(error)]"        = "deviceError"
  )
  table(
    border      = 0
    cellpadding = 0
    cellspacing = 0
    width       = "100%"
    height      = "100%"
  )
    tbody(*ngIf="!deviceError")
      tr
        td(colspan="3" style="height:40px;")
          div(style="font-weight:bold;font-size:1.3em;")
            |{{ devices?.length }} Devices
          |{{ audioOutputs?.length }} Audio Outputs
      tr(style="height:40px;")
        td(valign="bottom")
          |{{ videoDevices?.length }} Video Inputs
        td(valign="bottom")
          |{{ audioDevices?.length }} Audio Inputs
        td Facing Mode {{ isFacingModeSupported ? 'IS' : 'NOT' }} Supported
      tr(style="height:40px;")
        td
          select(
            style      = "display:block;width:100%;height:100%"
            "(change)" = "changeConfig.videoDeviceId=$event.target.value"
          )
            option default
            option(
              *ngFor       = "let device of videoDevices;let index=index"
              "[value]"    = "device.deviceId"
              "[selected]" = "changeConfig.videoDeviceId==device.deviceId"
            ) {{ device.label || device.kind+'('+index+')' }}
        td
          select(
            style      = "display:block;width:100%;height:100%"
            "(change)" = "changeConfig.audioDeviceId=$event.target.value"
          )
            option default
            option(
              *ngFor       = "let device of audioDevices;let index=index"
              "[value]"    = "device.deviceId"
              "[selected]" = "changeConfig.audioDeviceId==device.deviceId"
            ) {{ device.label || device.kind+'('+index+')' }}
        td
          select(
            style      = "display:block;width:100%;height:100%"
            "(change)" = "changeConfig.facingMode=$event.target.value"
          )
            option default
            option(
              *ngFor       = "let item of facingModes;let index=index"
              "[value]"    = "item"
              "[selected]" = "changeConfig.facingMode==item"
            ) {{ item }}
      tr
        td(colspan="3")
          textarea(
            style = "padding:.5em;font-size:1em;width:100%;height:100%;min-height:200px;"
          ) {{ devices | json }}
    tfoot
      tr(*ngIf="deviceError")
        td(colspan="3")
          textarea(
            readonly
            style = "padding:.5em;font-size:1em;width:100%;height:100%;color:red;"
          ) {{ deviceError.name+'\r\r' }}{{ deviceError.message+'\r\r' }}{{ deviceError | json }}
      tr
        td(colspan="3" style="height:60px")
          button(
            "(click)" = "changeConfig=null"
            style     = "padding:1em;font-size:1.2em;width:100%"
          ) close

// capture
table(
  *ngIf       = "!changeConfig && captured"
  border      = 0
  cellpadding = 0
  cellspacing = 0
  width       = "100%"
  height      = "100%"
)
  tr
    td(
      colspan    = "2"
      valign     = "top"
      style      = "overflow:hidden;width:100%;text-align:center;background-position:center;background-size:contain;background-repeat:no-repeat;"
      "[hidden]" = "!captured"
      "[style.background-image]" = "base64?'url('+base64+')':null"
    ) &nbsp;

  tr(*ngIf="showBase64" style="height:60px")
    td(colspan="2")
      input(
        style          = "width:100%;padding:1em;"
        "[attr.value]" = "base64"
        readonly
      )

  tr(style="height:60px")
    td
      button(
      "(click)" = "showBase64=!showBase64"
      style     = "padding:1em;font-size:1.2em;width:100%;"
    ) {{ showBase64 ? 'Hide':'Show'}} Base64
    td
      button(
        "(click)" = "showBase64=null;captured=null"
        style     = "padding:1em;font-size:1.2em;width:100%;"
      ) Close

// webcam
table(
  *ngIf       = "!captured"
  border      = 0
  cellpadding = 0
  cellspacing = 0
  width       = "100%"
  height      = "100%"
)
  ng-container(
    *ngFor="let camConfig of cameras; let index=index"
  )
    tr(*ngIf="cameras[index].error")
      td(colspan="2")
        textarea(
          style = "padding:.5em;font-size:1em;width:100%;height:100%;color:red;"
        )
          |{{ cameras[index].error.name+'\r\r' }}{{ cameras[index].error.message+'\r\r' }}{{ getErrorJson(cameras[index].error) | json }}
    tr(*ngIf="!cameras[index].error")
      td(
        *ngIf   = "!cameras[index].destroy"
        colspan = "3"
        valign  = "top"
      )
        ack-webcam(
          #webcam = ""
          "[videoDeviceId]" = "cameras[index].videoDeviceId"
          "[facingMode]"    = "cameras[index].facingMode"
          "[reflect]"       = "cameras[index].reflect"
          "[(error)]"       = "cameras[index].error"
          "(errorChange)"   = "logerror($event)"
          "[options]"       = "cameras[index].options"
          "(success)"       = "onSuccess($event)"
          style             = "width:100%;height:100%;display:block;text-align:center;"
        )
    tr(style="height:60px")
      td(colspan="3" style="text-align:center")
        div(*ngIf="cameras[index].resize")
          div
            |width:
            input(
              type      = "number"
              "(keyup)" = "$event.target.value ? cameras[index].options.width=$event.target.value && webcam.resize() : null"
              "[placeholder]" = "webcam.sets.element.width"
            )
            |px
            |&nbsp;&nbsp;x&nbsp;&nbsp;
            |height:
            input(
              type      = "number"
              "(keyup)" = "$event.target.value ? cameras[index].options.height=$event.target.value && webcam.resize() : null"
              "[placeholder]" = "webcam.sets.element.height"
            )
            |px

          br

          table(align="center")
            tr
              td
              td Video Width
              td  Video Height
            tr
              td min:
              td
                input(
                  type      = "number"
                  "(keyup)" = "$event.target.value ? cameras[index].options.video.width.min=$event.target.value && webcam.redraw() : null"
                )
              td
                input(
                  type      = "number"
                  "(keyup)" = "$event.target.value ? cameras[index].options.video.width.min=$event.target.value && webcam.redraw() : null"
                )
            tr
              td ideal:
              td
                input(
                  type      = "number"
                  "(keyup)" = "$event.target.value ? cameras[index].options.video.width.ideal=$event.target.value && webcam.redraw() : null"
                )
              td
                input(
                  type      = "number"
                  "(keyup)" = "$event.target.value ? cameras[index].options.video.width.ideal=$event.target.value && webcam.redraw() : null"
                )
            tr
              td exact:
              td
                input(
                  type      = "number"
                  "(keyup)" = "$event.target.value ? cameras[index].options.video.width.exact=$event.target.value && webcam.redraw() : null"
                )
              td
                input(
                  type        = "number"
                  "(keyup)" = "$event.target.value ? cameras[index].options.video.height.exact=$event.target.value && webcam.redraw() : null"
                )
            tr
              td max:
              td
                input(
                  type      = "number"
                  "(keyup)" = "$event.target.value ? cameras[index].options.video.width.max=$event.target.value && webcam.redraw() : null"
                )
              td
                input(
                  type        = "number"
                  "(keyup)" = "$event.target.value ? cameras[index].options.video.width.max=$event.target.value && webcam.redraw() : null"
                )
        button(
          "(click)" = "cameras[index].reflect=!cameras[index].reflect"
          style     = "padding:.5em;font-size:1.1em;"
          "[style.background-color]" = "cameras[index].reflect ? '#999' : null"
        ) Reflect{{ cameras[index].reflect ? 'ing' : ''}}
        button(
          *ngIf     = "webcam"
          "(click)" = "captureBase64(webcam)"
          style     = "padding:.5em;font-size:1.1em;"
        ) Capture
        button(
          "(click)" = "cameras.splice(index,1)"
          style     = "padding:.5em;font-size:1.1em;"
        ) Destroy
        button(
          "(click)" = "changeConfig=camConfig"
          style     = "padding:.5em;font-size:1.1em;"
        ) Devices
        button(
          "(click)" = "cameras[index].resize=!cameras[index].resize"
          style     = "padding:.5em;font-size:1.1em;"
          "[style.background-color]" = "cameras[index].resize ? '#999' : null"
        ) Sizing
        button(
          "(click)" = "cameras[index].playing=cameras[index].playing?0:1;cameras[index].playing ? webcam.stop() : webcam.play()"
          style     = "padding:.5em;font-size:1.1em;"
          "[style.background-color]" = "cameras[index].resize ? '#999' : null"
        ) Stop/Starts
      td
      td
  tr(style="height:60px")
    td(colspan="3")
      button(
      "(click)" = "addCamera()"
      style     = "padding:1em;font-size:1.2em;width:100%"
    ) Add Device
